AWSTemplateFormatVersion: 2010-09-09
Description: Create S3 Proxy API Gateway

Parameters:
  VpcCidr:
    Type: String
    Default: 10.4.0.0/28

  SubnetCidr:
    Type: String
    Default: 10.4.0.0/28

  InstanceType:
    Type: String
    Default: m5.large

  Keypair:
    Type: String
    Default: tuimac
 
  NameTagKey:
    Type: String
    Default: Name

  NameTagValue:
    Type: String
    Default: windows

Resources:
  # VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue
 
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # Subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - 'a'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  # Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAccociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref NameTagValue
      GroupDescription: Basic Firewall
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  # FleetIAMRole
  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SpotFleet
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  # Create EC2 Instance
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub LambdaExecution-${NameTagValue}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub LambdaExecution-${NameTagValue}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:CreateImage"
                  - "ec2:CreateTags"
                  - "ec2:DeleteSnapshot"
                  - "ec2:DeregisterImage"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeImages"
                  - "ec2:DescribeSnapshots"
                  - "ec2:StopInstances"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref VPNTagKey
          Value: !Ref VPNTagValue

  GetAMIIdLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import traceback
          def handler(event, context):
            responseData = {}
            try:
              target = event["ResourceProperties"]["TagValue"]
              ec2 = boto3.client("ec2")
              if event["RequestType"] == "Delete":
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              else: 
                ec2Info = ec2.describe_images(Filters = [{"Name": "tag:Name", "Values": [target]}])
                responseData["Id"] = ec2Info["Images"][0]["ImageId"]
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "Id")
                return
            except:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
      Runtime: python3.8
      Timeout: 90
      Handler: index.handler
      MemorySize: 128
      FunctionName: GetAMIId
      Role: !GetAtt LambdaExecutionRole.Arn
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  GetAMIId:
    Type: Custom::GetAMIID
    Properties:
      ServiceToken: !GetAtt GetAMIIdLambda.Arn
      TagValue: !Ref NameTagValue

  EC2SpotInstance:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt SpotFleetRole.Arn
        TerminateInstancesWithExpiration: false
        InstanceInterruptionBehavior: stop
        TargetCapacity: 1
        LaunchSpecifications:
          - EbsOptimized: true
            ImageId: !GetAtt GetAMIId.Id
            InstanceType: !Ref InstanceType
            KeyName: !Ref Keypair
            Monitoring:
              Enabled: false
            NetworkInterfaces:
              - AssociatePublicIpAddress: true
                DeleteOnTermination: true
                Description: for Screen Capture Devlopment Environment
                DeviceIndex: 0
                Groups:
                  - !Ref SecurityGroup
                SubnetId: !Ref Subnet
            SpotPrice: 1
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: NameTagKey
                    Value: NameTagValue

  BackupInstanceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import time
          from datetime import date
          import traceback
          def handler(event, context):
            responseData = {}
            try:
              target = event["ResourceProperties"]["TagValue"]
              ec2 = boto3.client("ec2")
              if event["RequestType"] == "Delete":
                tagtargets = []
                createDate = date.today().strftime("%Y%m%d")
                instanceInfo = ec2.describe_instances(
                  Filters = [
                    {
                      "Name": "tag:Name",
                      "Values": [target]
                    },
                    {
                      "Name": "instance-state-code",
                      "Values": ["16"]
                    }
                  ]
                )["Reservations"][0]["Instances"][0]
                amiInfo = ec2.describe_images(
                  Filters = [
                    {
                      "Name": "tag:Name",
                      "Values": [target]
                    },
                    {
                      "Name": "name",
                      "Values": [target]
                    }
                  ]
                )["Images"][0]
                amiId = amiInfo["ImageId"]
                snapshotIds = [ebs["Ebs"]["SnapshotId"] for ebs in amiInfo["BlockDeviceMappings"]]
                ec2.deregister_image(ImageId=amiId)
                [ec2.delete_snapshot(SnapshotId=snapshotId) for snapshotId in snapshotIds]
                instanceId = instanceInfo["InstanceId"]
                try:
                  ec2.stop_instances(InstanceIds=[instanceId])
                  while "stopped" != ec2.describe_instances(InstanceIds=[instanceId])["Reservations"][0]["Instances"][0]["State"]["Name"]:
                    time.sleep(1)
                except: pass
                amiId = ec2.create_image(InstanceId=instanceId, NoReboot=False, Name=target)["ImageId"]
                while "available" != ec2.describe_images(ImageIds=[amiId])["Images"][0]["State"]:
                  time.sleep(1)
                tagtargets.append(amiId)
                for ebs in ec2.describe_images(ImageIds=[amiId])["Images"][0]["BlockDeviceMappings"]:
                  tagtargets.append(ebs["Ebs"]["SnapshotId"])
                ec2.create_tags(
                  Resources = tagtargets,
                  Tags = [
                    {"Key": "Environment", "Value": target},
                    {"Key": "Name", "Value": target},
                    {"Key": "CreateDate", "Value": createDate}
                  ]
                )
                responseData["ProgramLogicStatus"] = "Taking AMI backup is successed."
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
            except:
              responseData["ProgramLogicStatus"] = traceback.format_exc()
              return
      Runtime: python3.8
      Timeout: 900
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: BackupInstance
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  BackupVPNInstance:
    Type: Custom::BackupVPNInstance
    Properties:
      ServiceToken: !GetAtt BackupInstanceLambda.Arn
      TagValue: !Ref NameTagValue
